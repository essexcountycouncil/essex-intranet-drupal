<?php

/**
 * @file
 * Module file for the Cookie settings block.
 *
 * Overrides the eu_cookie_compliance_popup_info theme using different theme
 * templates depending on which page we are.  The Cookie settings page, where
 * the Cookie settings block is embedded, gets a cookie popup template that
 * displays categories.  A different template is used for the remaining pages
 * and that template does not display categories.  This makes it possible to
 * manage the Cookie categories not from the EU Cookie popup but from our Cookie
 * settings block only.
 *
 * Turns off the Cookie popup while at the Cookie settings page.  On this page,
 * we have our Cookie settings *block*.  This makes the popup redundant.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\PathElement;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 *
 * Provide two overrides for the default eu_cookie_compliance_popup_info theme
 * template.  One template is used for the Cookie settings block.  The other one
 * is used everywhere else.  The template for the Cookie settings block uses
 * radio boxes instead of checkboxes.
 *
 * Only declare these template overrides when a Cookies settings page path is
 * present in the site configuration.
 */
function gull_cookie_settings_block_theme() {

  $cookie_settings_page_path = \Drupal::config('gull_cookie_settings_block.settings')->get('cookie-settings-page-path');
  $trimmed_cookie_settings_page_path = trim($cookie_settings_page_path, '/');

  if (empty($trimmed_cookie_settings_page_path)) {
    return [];
  }

  return [
    'eu_cookie_compliance_popup_info__cookie_settings_block' => [
      'base hook' => 'eu_cookie_compliance_popup_info',
      'template'  => 'eu-cookie-compliance-popup-info--cookie-settings-block',
    ],
    'eu_cookie_compliance_popup_info__override' => [
      'base hook' => 'eu_cookie_compliance_popup_info',
      'template'  => 'eu-cookie-compliance-popup-info--override',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 *
 * Override the **default** theme template for the
 * eu_cookie_compliance_popup_info theme in all pages except the Cookie settings
 * page.  On that page, we use a different theme template.
 */
function gull_cookie_settings_block_theme_suggestions_eu_cookie_compliance_popup_info_alter(array &$suggestions, array $vars) {

  if (_gull_cookie_settings_block_is_cookie_settings_page()) {
    $suggestions[] = 'eu_cookie_compliance_popup_info__cookie_settings_block';
  }
  else {
    $suggestions[] = 'eu_cookie_compliance_popup_info__override';
  }
}

/**
 * Implements hook_preprocess_hook() for hook_preprocess_eu_cookie_compliance_popup_info().
 *
 * Inserts the Cookie settings page's Url.  We link to this page from the theme
 * templates.  We need the Url object in the template.
 */
function gull_cookie_settings_block_preprocess_eu_cookie_compliance_popup_info(array &$vars) {

  $cookie_settings_page_path = Drupal::config('gull_cookie_settings_block.settings')->get('cookie-settings-page-path');

  $vars['cookie_settings_page_url'] = Url::fromUserInput($cookie_settings_page_path);
}

/**
 * Implements hook_js_settings_alter().
 *
 * Turns off the Cookie settings popup on the Cookie settings page.  On that
 * page, we already have the Cookie settings form within a block.  This makes
 * the popup redundant.
 *
 * @see Drupal.behaviors.euCookieCompliancePopup()
 */
function gull_cookie_settings_block_js_settings_alter(array &$settings) {

  if (_gull_cookie_settings_block_is_cookie_settings_page()) {
    $settings['eu_cookie_compliance']['containing_element'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for hook_form_eu_cookie_compliance_config_form_alter().
 *
 * Alterations:
 * - Add the Cookie settings page path field and its submit handler.
 */
function gull_cookie_settings_block_form_eu_cookie_compliance_config_form_alter(array &$form, FormStateInterface $form_state): void {

  $config = \Drupal::config('gull_cookie_settings_block.settings');

  $form['consent_per_category']['cookie-settings-page-path'] = [
    '#type' => 'path',
    '#title' => t('Cookie settings page path'),
    '#description' => t('Path of the Cookie settings page of this site.  Where available, use the **Path alias** of the Cookie settings page.'),
    '#default_value' => $config->get('cookie-settings-page-path'),
    '#convert_path' => PathElement::CONVERT_NONE,
  ];

  $form['#submit'][] = '_gull_cookie_settings_block_path_submit';
}

/**
 * Form submit handler.
 *
 * Save $form['consent_per_category']['cookie-settings-page-path'] as
 * gull_cookie_settings_block.settings.cookie-settings-page-path config.
 */
function _gull_cookie_settings_block_path_submit(array &$form, FormStateInterface $form_state) {

  $cookie_settings_page_path = $form_state->getValue('cookie-settings-page-path');
  $path_w_leading_slash = '/' . trim($cookie_settings_page_path, '/');

  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('gull_cookie_settings_block.settings');

  $config->set('cookie-settings-page-path', $path_w_leading_slash);
  $config->save();
}

/**
 * Are we on the cookie settings page?
 */
function _gull_cookie_settings_block_is_cookie_settings_page(): bool {

  $is_cookie_settings_page = &drupal_static(__FUNCTION__);
  if (isset($is_cookie_settings_page)) {
    return $is_cookie_settings_page;
  }

  $cookie_settings_page_path = \Drupal::config('gull_cookie_settings_block.settings')->get('cookie-settings-page-path');

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  $is_cookie_settings_page = ($current_path_alias === $cookie_settings_page_path);
  return $is_cookie_settings_page;
}

/**
 * Implements hook_page_attachments_alter().
 */
function gull_cookie_settings_block_page_attachments_alter(array &$attachment_list) {

  _gull_cookie_settings_block_defer_tracker_scripts($attachment_list);
}

/**
 * Removes references to tracker scripts from the page header.
 *
 * The removed scripts are added later from Javascript.
 * - Google analytics: Added by the google_analytics contrib module.
 * - Hotjar: Added by the Hotjar contrib module.
 *
 * @see google_analytics_page_attachments()
 * @see hotjar_page_attachments()
 * @see js/deferred-ga-script-runner.js
 * @see js/deferred-hotjar-script-runner.js
 */
function _gull_cookie_settings_block_defer_tracker_scripts(array &$attachment_list): void {

  $target_head_items = [
    'hotjar_script_tag',
    'google_analytics_tracking_script',
    'google_analytics_tracking_file',
  ];
  $renderer = Drupal::service('renderer');

  $has_html_head = isset($attachment_list['#attached']['html_head']);
  if (!$has_html_head) {
    return;
  }

  $head_items_to_defer = array_filter($attachment_list['#attached']['html_head'], function ($attachment) use ($target_head_items) {
    $head_item_id = $attachment[1] ?? '';
    return is_string($head_item_id) and in_array($head_item_id, $target_head_items);
  });

  // Remove deferred head items.
  array_walk($head_items_to_defer, function ($ignore, $head_item_key) use (&$attachment_list) {
    unset($attachment_list['#attached']['html_head'][$head_item_key]);
  });

  $deferred_head_items_markup = array_reduce($head_items_to_defer, function ($carry, $attachment) use ($renderer) {
    $head_item_render_array = $attachment[0] ?? [];
    $head_item_id = $attachment[1] ?? '';
    if (empty($head_item_id) or !is_string($head_item_id)) {
      return;
    }

    // Some modules forget to declare the type of the render array!
    $head_item_render_array['#type'] = $head_item_render_array['#type'] ?? 'html_tag';
    $head_item_markup = $renderer->renderPlain($head_item_render_array);
    $carry[$head_item_id] = $head_item_markup;

    return $carry;
  }, []);

  $attachment_list['#attached']['drupalSettings']['deferred_scripts'] = json_encode($deferred_head_items_markup);
}
