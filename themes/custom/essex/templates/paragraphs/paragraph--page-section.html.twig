{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if not localgov_base_remove_css %}
  {{ attach_library('localgov_base/page-sections') }}
{% endif %}

{% if paragraph.localgov_width_of_section.value %}
  {% set width = paragraph.localgov_width_of_section.value %}
{% endif %}

{% if paragraph.localgov_bg_colour_of_section.value %}
  {% set bg_colour = paragraph.localgov_bg_colour_of_section.value %}
{% endif %}

{% if paragraph.localgov_padding_top_section.value %}
  {% set padding_top = paragraph.localgov_padding_top_section.value %}
{% endif %}

{% if paragraph.localgov_padding_bottom_section.value %}
  {% set padding_bottom = paragraph.localgov_padding_bottom_section.value %}
{% endif %}

{% if paragraph.field_curve.value %}
  {% set curve = paragraph.field_curve.value %}
{% endif %}

{%
  set classes = [
    'lgd-page-section',
    width ? 'lgd-page-section--' ~ width : 'lgd-container padding-horizontal',
    width == 'full-width' ? 'padding-horizontal',
    width == 'contained-content' ? 'padding-horizontal',
    width == 'contained-content' ? 'lgd-container',
    bg_colour ? 'lgd-page-section--has-bg-colour' : 'lgd-page-section--no-bg-colour',
    bg_colour ? 'lgd-page-section--bg-' ~ bg_colour,
    curve ? 'lgd-page-section--curve',
    padding_top ? 'lgd-page-section--padding-top-' ~ padding_top,
    padding_bottom ? 'lgd-page-section--padding-bottom-' ~ padding_bottom,
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

<div{{ attributes.addClass(classes) }}>

  {% if width == 'full-width-contained-content' %}
    <div class="lgd-container padding-horizontal">
    {% elseif width == 'contained-breakout' %}
      <div class="lgd-container lgd-container--mega padding-horizontal">
  {% endif %}

    {{ content }}

  {% if width == 'full-width-contained-content' or width == 'contained-breakout' %}
    </div>
  {% endif %}
{% if curve == true %}
<div class="curve-bottom"></div>
<svg viewBox="0 0 1200 114" id="curvedsvg">
     <clipPath id="my-clip-path" clipPathUnits="objectBoundingBox"><path d="M0.002,0.012 L0,0.004 L0,0.022 L0,0.044 V0.362 C0,0.405,0,0.453,0,0.506 V1 H0.5 H1 V0.808 C1,0.775,1,0.747,1,0.724 V0.621 V0.61 H0.998 V0.615 C0.997,0.613,0.997,0.612,0.997,0.612 C0.995,0.612,0.976,0.643,0.954,0.682 C0.827,0.91,0.716,0.995,0.571,0.974 C0.417,0.953,0.295,0.809,0.159,0.487 C0.11,0.369,0.033,0.139,0.003,0.019 L0.002,0.012"></path></clipPath>
</svg>
{% endif %}
</div>
