stages:
  - build-and-push-images
  - provision-database
  - update-app-service

build_image:
  stage: build-and-push-images
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add py3-pip gcc musl-dev python3-dev libffi-dev openssl openssl-dev cargo make
    - pip install azure-cli
    - az login --service-principal -u${ARM_CLIENT_ID} -p${ARM_CLIENT_SECRET} -t${ARM_TENANT_ID}
    - docker login -u${DOCKER_USER} -p${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
  script:
    - docker build -t ${DOCKER_REGISTRY}/intranet-drupal-fpm:latest -t intranet-drupal-fpm:${CI_PIPELINE_IID} -t intranet-drupal-fpm -f Dockerfile-drupal .
    - docker build -t ${DOCKER_REGISTRY}/intranet-nginx-drupal:latest -t intranet-nginx-drupal:${CI_PIPELINE_IID} -t intranet-nginx-drupal -f Dockerfile-nginx .
    - docker push ${DOCKER_REGISTRY}/intranet-nginx-drupal
    - docker push ${DOCKER_REGISTRY}/intranet-drupal-fpm
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    

provision-database:
  stage: provision-database
  script:
    - echo "To do - Provision database scripting when confirmed with devs"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

update-app-service:
  stage: update-app-service
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - apk add py3-pip gcc musl-dev python3-dev libffi-dev openssl openssl-dev cargo make
    - pip install azure-cli
    - az extension add --name containerapp
    - az login --service-principal -u${ARM_CLIENT_ID} -p${ARM_CLIENT_SECRET} -t${ARM_TENANT_ID}
  script:
    - echo "Creating new revision of Container App"
    - az containerapp revision copy --name intranet --resource-group rg-ecc-intranet-uks-dev --revision-suffix ${CI_PIPELINE_IID}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual




